#!/bin/bash

# PCR (Pacman Cache Repository) Script
# https://github.com/yadieet/pcr
#
# yadieet sa <yadieet@gmail.com>

version="1.40.0"

if [[ $EUID == 0 ]]; then
   echo "Sorry, please don't run this script as root."
   exit
fi

if [[ -z $@ ]]; then
    echo "Cannot continue, missing arguments. (Use -h for help)"
    echo "Example usage :"
    echo "- $ create-pcr -r \"core extra community multilib mate\" -o \"/data/\" -cp 0 -pi 1"
    echo "- $ create-pcr -r \"core extra community multilib mate\" -ifd \"/data_ext/ARCHLINUX_DATA/aur_packages/\" -o \"/data/\" -cp 0 -pi 1"
    exit
fi

SHOW_HELP=0
SHOW_VERSION=0
quiet=0
copying=0
prefer_installed=1
repoxs=
outdir=
inc_foreign=0
foreign=

while (( $# ))
do
    case $1 in
        -h)
            SHOW_HELP=1
            break;
            ;;
        -v)
            SHOW_VERSION=1
            break
            ;;
        -q)
            quiet=1
            ;;
        -r)
            shift
            repoxs=$1
            ;;
        -o)
            shift
            outdir=$1
            ;;
        -cp)
            shift
            copying=$1
            ;;
        -pi)
            shift
            prefer_installed=$1
            ;;
        -ifd)
            inc_foreign=1
            shift
            foreign=$1
            ;;
    esac
    shift
done

if (( SHOW_HELP )); then
    echo
    echo "Pacman Cache Repository Script v$version"
    echo "-- https://github.com/yadieet/pcr"
    echo
    echo
    echo "OPTIONS :"
    echo
    echo "-r   : repositories, example : \"core extra community multilib\""
    echo
    echo "-o   : output directory, must already exists."
    echo "       This script will create the \`PCR\` directory under output directory."
    echo
    echo "-cp  : copy mode. Default is '0' (NO)."
    echo "       If value is not '1', use linking mode."
    echo
    echo "-pi  : prefer installed. Default is '1' (YES)."
    echo "       Use installed version of package if the current up-to-date version and installed version of package are exists."
    echo
    echo "-ifd : also create the \`foreign\` repository by including packages from a directory where foreign packages are saved."
    echo "       For example, yaourt 'EXPORTDIR' directory where AUR packages are saved/exported."
    echo "       Note: Only installed packages are processed."
    echo
    echo "-q   : don't show \"file is not exists\" messages."
    echo
    echo "-v   : show version and exit."
    echo
    echo
    echo "Example usage :"
    echo "- $ create-pcr -r \"core extra community multilib\" -o \"/data/\" -cp 0 -pi 1\""
    echo "- $ create-pcr -r \"core extra community multilib\" -ifd \"/data/ARCHLINUX_DATA/aur_packages/\" -o \"/data/\" -cp 0 -pi 1"
    echo

    exit
fi

if (( SHOW_VERSION )); then
    echo "$version"
    exit
fi

if [[ -z $repoxs ]]; then
    echo "Cannot continue, please give some repoxs. (Example: -r \"core extra community multilib mate\")"
    exit
fi

if [[ ${repoxs:0:1} == '-' ]]; then
    echo "Invalid value for -r !"
    exit
fi

for repox in $repoxs
do
    pkglist=`pacman -Sl $repox`
    if [[ -z `echo "$pkglist" | awk {'print $1'}` ]]; then
        echo "Repox '$repox' not exist."
        exit
    fi
done

pacman_cache_dir=`realpath "/var/cache/pacman/pkg/"`
if [ ! -d "$pacman_cache_dir" ]; then
    echo "Cannot continue, pacman cache directory '$pacman_cache_dir' is not exist."
    exit
fi
if [ ! -r "$pacman_cache_dir" ]; then
    echo "Cannot continue, pacman cache directory '$pacman_cache_dir' is not readable."
    exit
fi

if [[ -z "$outdir" ]]; then
    echo "Cannot continue, please specify the output directory. (Example: -o \"/data/\" )"
    exit
fi
if [ ! -d "$outdir" ]; then
    echo "Cannot continue, output directory '$outdir' is not exist."
    exit
fi
outdir=`realpath "$outdir"`
if [ ! -w "$outdir" ]; then
    echo "Cannot continue, output directory '$outdir' is not writable."
    exit
fi

if [[ $copying != 0 && $copying != 1 ]]; then
    echo "Invalid/missing value for -cp !"
    exit
fi

if [[ $prefer_installed != 0 && $prefer_installed != 1 ]]; then
    echo "Invalid/missing value for -pi !"
    exit
fi

if [[ $inc_foreign == 1 && -z "$foreign" ]]; then
    echo "Missing value for -ifd !"
    exit
fi

if [[ $inc_foreign == 1 ]]; then
    if [ ! -d "$foreign" ]; then
        echo "Cannot continue, '$foreign' directory is not exist."
        exit
    fi
    foreign=`realpath "$foreign"`
    if [ ! -r "$foreign" ]; then
        echo "Cannot continue, '$foreign' directory is not readable."
        exit
    fi
fi

echo "Configuration :"
echo "==============="
echo "Pacman cache directory ---------- = '$pacman_cache_dir'"
echo "Repositories (-r) --------------- = $repoxs"
echo "Output directory (-o) ----------- = '$outdir'"
echo -n "Copy mode (-cp) ----------------- = ";  [[ $copying == 0 ]] && echo "no (linking)" || echo "yes"
echo -n "Prefer installed (-pi) ---------- = ";  [[ $prefer_installed == 0 ]] && echo "no" || echo "yes"
[[ "$inc_foreign" == 1 ]] && echo "Foreign packages directory (-ifd) = '$foreign'"
echo

arch=`uname -m`

cd "$outdir"
if [ -e "PCR" ]; then
        echo "Cannot continue, 'PCR' directory in '$outdir' exist. Please remove 'PCR' directory first."
        exit
fi
mkdir -p "PCR/archlinux"
cd "PCR/archlinux"

t=0

function copyx() {
    ((t++))
    echo "#"$t: Copying `ls $1` to [$2] directory.. [$3]
    cp -L $1 $2/os/$arch
}
function linkingx() {
    ((t++))
    echo "#"$t: Linking `ls $1` to [$2] directory.. [$3]
    ln -s $1 $2/os/$arch
}

for repox in $repoxs
do
    mkdir -p $repox/os/$arch
        pkglist=`pacman -Sl $repox`
    while read pkg
    do
        pkgname=`echo $pkg | awk {'print $2'}`
        pkgver=`echo $pkg | awk {'print $3'}`
        filex=$pacman_cache_dir/"$pkgname-$pkgver"*.pkg.tar.xz
        if [ ! -e $filex ]; then
            inspkg=$(echo "`pacman -Q`" | grep -m 1 "^$pkgname")
            if [[ ! -z "$inspkg" ]]; then
                insver=`echo "$inspkg" | awk {'print $2'}`
                if [[ "$pkgver" != "$insver" ]];then
                    filexx=$pacman_cache_dir/"$pkgname-$insver"*.pkg.tar.xz
                    if [ -e $filexx ]; then
                        [[ $copying == 1 ]] && copyx $filexx $repox 3 || linkingx $filexx $repox 3
                    else
                        [[ $quiet == 0 ]] && echo - $pkgname-$pkgver package file is not exist. [2]
                    fi
                else
                    [[ $quiet == 0 ]] && echo - $pkgname-$pkgver package file is not exist. [1]
                fi
            else
                [[ $quiet == 0 ]] && echo - $pkgname-$pkgver package file is not exist. [0]
            fi
        else
            if [[ $prefer_installed == 1 ]]; then
                inspkg=$(echo "`pacman -Q`" | grep -m 1 "^$pkgname")
                if [[ ! -z "$inspkg" ]]; then
                    insver=`echo "$inspkg" | awk {'print $2'}`
                    if [[ "$pkgver" != "$insver" ]];then
                        filexx=$pacman_cache_dir/"$pkgname-$insver"*.pkg.tar.xz
                        if [ ! -e $filexx ]; then
                            [[ $copying == 1 ]] && copyx $filex $repox 8 || linkingx $filex $repox 8
                        else
                            [[ $copying == 1 ]] && copyx $filexx $repox 7 || linkingx $filexx $repox 7
                        fi
                    else
                        [[ $copying == 1 ]] && copyx $filex $repox 6 || linkingx $filex $repox 6
                    fi
                else
                    [[ $copying == 1 ]] && copyx $filex $repox 5 || linkingx $filex $repox 5
                fi
            else
                [[ $copying == 1 ]] && copyx $filex $repox 4 || linkingx $filex $repox 4
            fi
        fi
        done < <(echo "$pkglist")
done

if [[ $inc_foreign == 1 ]]; then
    mkdir -p foreign/os/$arch
    fpkgs=`pacman -Qm`
    while read fpkg
    do
        pkgname=`echo $fpkg | awk {'print $1'}`
        pkgver=`echo $fpkg | awk {'print $2'}`
        filex=$foreign/"$pkgname-$pkgver"*.pkg.tar.xz
        if [ ! -e $filex ]; then
            [[ $quiet == 0 ]] && echo - $pkgname-$pkgver package file is not exist. [9]
        else
            [[ $copying == 1 ]] && copyx $filex foreign 10 || linkingx $filex foreign 10
        fi
    done < <(echo "$fpkgs")
fi



trap 'kill -TERM $PID && exit' SIGINT SIGKILL SIGTERM

for repox in $repoxs
do
    cd "$outdir/PCR/archlinux/$repox/os/$arch"
    repo-add $repox.db.tar.gz *.pkg.tar.xz &
    PID=$!
    wait $PID
done

if [[ $inc_foreign == 1 ]]; then
    cd "$outdir/PCR/archlinux/foreign/os/$arch"
    repo-add foreign.db.tar.gz *.pkg.tar.xz &
        PID=$!
    wait $PID
fi

echo "======================================="
echo "Total: $t packages."
